# =============================================================================
# FICHIER DE CONFIGURATION SQLFLUFF
# Ce fichier définit les règles de formatage et de qualité pour le code SQL.
# L'objectif est d'assurer un code propre, lisible et cohérent.
# =============================================================================

[sqlfluff]
# -- Paramètres Généraux --

# Niveau de détail des messages dans la console (0 = silencieux, juste les erreurs).
verbose = 0
# Dialecte SQL utilisé dans le projet. Essentiel pour une analyse correcte de la syntaxe.
dialect = duckdb
# Longueur maximale autorisée pour une ligne de code SQL.
max_line_length = 230

# -- Gestion des Règles --

# LISTE BLANCHE : Seules les règles listées ici seront appliquées.
# Cette liste active des règles sur les alias, la capitalisation, les jointures, etc.
rules = L011, L013, AL08, L037, L036, L066, L049, L010, L014, L030, L040, L063, L061, LT02, LT04, LT06, L055, CV11, L046, ST02, ST04, LT08, LT07
# LISTE NOIRE : Les règles listées ici sont désactivées.
exclude_rules = AM04, ST06

# -- Configuration Technique --

# Longueur de ligne pour les messages de sortie de sqlfluff dans le terminal.
output_line_length = 130
# Extensions de fichiers à analyser.
sql_file_exts = .sql
# Moteur de template à utiliser. Obligatoire pour les projets dbt.
templater = dbt
# Nombre de processeurs à utiliser (0 = tous les cœurs disponibles, pour plus de rapidité).
processes = 0


# -- Configuration du moteur de template DBT --
# Indique à sqlfluff où trouver les fichiers du projet dbt pour les compiler correctement.
[sqlfluff:templater:dbt]
# Chemin vers le dossier racine du projet dbt.
project_dir = src/transformation/dbt_paris_event_analyzer/
# Chemin vers le dossier des profils de connexion dbt.
profiles_dir = src/transformation/dbt_paris_event_analyzer/profiles/
# Nom du profil à utiliser (défini dans profiles.yml).
profile = dbt_paris_event_analyzer
# Cible de déploiement à utiliser (ex: dev, prod).
target = prod
# Nettoie les fichiers temporaires après l'analyse.
clean_up_temp_files = true


# -- Configuration de l'Indentation --
[sqlfluff:indentation]
# Permet des indentations "implicites" pour un alignement plus flexible du code.
allow_implicit_indents = True


[sqlfluff:layout.indent]
# Utiliser des espaces (et non des tabulations) pour l'indentation.
indent_unit = space


# =============================================================================
# RÈGLES DE STYLE SPÉCIFIQUES
# Configuration détaillée de certaines règles pour définir notre style de code.
# =============================================================================

# -- RÈGLES DE CAPITALISATION --

[sqlfluff:rules:capitalisation.keywords]
# Les mots-clés SQL (SELECT, FROM, WHERE...) doivent être en MAJUSCULES.
capitalisation_policy = upper
[sqlfluff:rules:capitalisation.identifiers]
# Les identifiants (noms de tables, colonnes, alias...) doivent être en minuscules.
extended_capitalisation_policy = lower
[sqlfluff:rules:capitalisation.functions]
# Les noms de fonctions (sum, avg, count...) doivent être en minuscules.
extended_capitalisation_policy = lower
[sqlfluff:rules:capitalisation.literals]
# Les littéraux (NULL, TRUE, FALSE) doivent être en MAJUSCULES.
capitalisation_policy = upper
[sqlfluff:rules:capitalisation.types]
# Les types de données (VARCHAR, INT, TIMESTAMP...) doivent être en MAJUSCULES.
extended_capitalisation_policy = upper


# -- RÈGLES DE CONVENTION --

[sqlfluff:rules:convention.not_equal]
# Pour vérifier une inégalité, utiliser l'opérateur `!=` au lieu de `<>`.
preferred_not_equal_style = c_style

[sqlfluff:layout:type:comma]
# Les virgules dans les listes (colonnes...) doivent être placées à la fin de la ligne.
line_position = trailing

[sqlfluff:rules:convention.casting_style]
# Pour convertir un type de données, utiliser la syntaxe courte `::` (ex: `colonne::INT`).
preferred_type_casting_style = shorthand
